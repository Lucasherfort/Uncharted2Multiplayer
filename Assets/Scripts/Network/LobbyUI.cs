using Fusion;
using Fusion.Sockets;
using System;
using System.Collections.Generic;
using System.Linq;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;

public class LobbyUI : MonoBehaviour, INetworkRunnerCallbacks
{
    [SerializeField] private GameObject panelLobby;
    [SerializeField] private GameObject panelSearching;
    [SerializeField] private TMP_Text[] playerTexts;
    [SerializeField] private GameObject recherchepartiesButton;
    [SerializeField] private GameObject startButton;

    private NetworkRunner runner;

    async public void OnClickSearchMatch()
{
    // 1Ô∏è‚É£ UI : passer en mode recherche
    panelLobby.SetActive(false);
    panelSearching.SetActive(true);

    // 2Ô∏è‚É£ R√©cup√©rer le NetworkRunner depuis le FusionLauncher
    if (runner == null)
    {
        runner = FindObjectOfType<NetworkRunner>();
        if (runner == null)
        {
            Debug.LogError("‚ùå Aucun NetworkRunner trouv√© dans la sc√®ne ! Assure-toi que FusionLauncher est pr√©sent.");
            panelLobby.SetActive(true);
            panelSearching.SetActive(false);
            return;
        }
    }

    // 3Ô∏è‚É£ Ajouter les callbacks si pas d√©j√† fait
    runner.AddCallbacks(this);

    // 4Ô∏è‚É£ Pr√©parer les arguments pour d√©marrer la partie
    var args = new StartGameArgs()
    {
        GameMode = GameMode.AutoHostOrClient,
        SessionName = "Room_2Players",
        Scene = SceneRef.FromIndex(1), // LobbyScene
        SceneManager = runner.GetComponent<INetworkSceneManager>(),
        PlayerCount = 2 // nombre max de joueurs
    };

    // 5Ô∏è‚É£ D√©marrer la session
    var result = await runner.StartGame(args);

    // 6Ô∏è‚É£ G√©rer l‚Äôerreur
    if (!result.Ok)
    {
        Debug.LogError($"‚ùå Impossible de d√©marrer la partie : {result.ShutdownReason}");
        panelLobby.SetActive(true);
        panelSearching.SetActive(false);
        return;
    }

    // 7Ô∏è‚É£ Afficher le bouton "Start" seulement si je suis l‚Äôh√¥te
    startButton.SetActive(runner.IsServer);

    // Optionnel : mettre √† jour la liste des joueurs si d√©j√† pr√©sents
    UpdatePlayerList();
}

    // ============ Callbacks Fusion ============

    public void OnPlayerJoined(NetworkRunner runner, PlayerRef player)
    {
        Debug.Log($"üë§ Joueur {player.PlayerId} a rejoint");

        UpdatePlayerList();

        // Si on a atteint 2 joueurs ‚Üí on lance la partie
        if (runner.ActivePlayers.Count() == 2)
        {
            if (runner.IsServer) // ‚úÖ seul le host lance la nouvelle sc√®ne
            {
                //runner.SetActiveScene("GameScene"); // Nom de ta sc√®ne de jeu
            }
        }
    }

    public void OnPlayerLeft(NetworkRunner runner, PlayerRef player)
    {
        Debug.Log($"üë§ Joueur {player.PlayerId} a quitt√©");
        UpdatePlayerList();
    }

 public void UpdatePlayerList()
    {
        if (runner == null) return;

        // 1Ô∏è‚É£ On r√©cup√®re les joueurs
        var allPlayers = runner.ActivePlayers.ToList();

        // 2Ô∏è‚É£ On force mon joueur en premier
        var orderedPlayers = allPlayers
            .OrderByDescending(p => p == runner.LocalPlayer) // true = 1, false = 0 ‚Üí donc local en premier
            .ThenBy(p => p.PlayerId) // les autres tri√©s par ID (optionnel)
            .ToList();

        // 3Ô∏è‚É£ On remplit les textes
        for (int i = 0; i < playerTexts.Length; i++)
        {
            if (i < orderedPlayers.Count)
            {
                var player = orderedPlayers[i];

                // ‚ö†Ô∏è Ici j‚Äôaffiche juste l‚ÄôID ‚Üí mais tu peux mettre un pseudo stock√© dans un dictionnaire
                playerTexts[i].text = (player == runner.LocalPlayer) 
                    ? $"Moi : Joueur {player.PlayerId}" 
                    : $"Joueur {player.PlayerId}";
            }
            else
            {
                // Si pas assez de joueurs ‚Üí on vide
                playerTexts[i].text = "Recherche de joueurs...";
            }
        }
    }

    public void OnClickStartGame()
    {
        StartGameScene();

        /*
        // Si le nombre de joueurs connect√©s = PlayerCount, on lance la sc√®ne de jeu
        if (runner.ActivePlayers.Count() == 10)
        {
            StartGameScene();
        }
        */
    }

    void StartGameScene()
    {
        if (runner.IsSceneAuthority)
        {
            runner.LoadScene(SceneRef.FromIndex(2), LoadSceneMode.Single);
        }
        else
        {
            Debug.LogError("INetworkSceneManager non trouv√© sur le runner !");
        }
    }

    // === Callbacks requis par Fusion (on peut les laisser vides si inutiles) ===
    public void OnConnectedToServer(NetworkRunner runner) { }
    public void OnConnectFailed(NetworkRunner runner, NetAddress remoteAddress, NetConnectFailedReason reason) { }
    public void OnConnectRequest(NetworkRunner runner, NetworkRunnerCallbackArgs.ConnectRequest request, byte[] token) { }
    public void OnCustomAuthenticationResponse(NetworkRunner runner, Dictionary<string, object> data) { }
    public void OnDisconnectedFromServer(NetworkRunner runner) { }
    public void OnHostMigration(NetworkRunner runner, HostMigrationToken hostMigrationToken) { }
    public void OnInput(NetworkRunner runner, NetworkInput input) { }
    public void OnInputMissing(NetworkRunner runner, PlayerRef player, NetworkInput input) { }
    public void OnReliableDataReceived(NetworkRunner runner, PlayerRef player, ArraySegment<byte> data) { }
    public void OnSceneLoadDone(NetworkRunner runner) { }
    public void OnSceneLoadStart(NetworkRunner runner) { }
    public void OnSessionListUpdated(NetworkRunner runner, List<SessionInfo> sessionList) { }
    public void OnShutdown(NetworkRunner runner, ShutdownReason shutdownReason) { }
    public void OnUserSimulationMessage(NetworkRunner runner, SimulationMessagePtr message) { }

    public void OnObjectExitAOI(NetworkRunner runner, NetworkObject obj, PlayerRef player)
    {
        throw new NotImplementedException();
    }

    public void OnObjectEnterAOI(NetworkRunner runner, NetworkObject obj, PlayerRef player)
    {
        throw new NotImplementedException();
    }

    public void OnDisconnectedFromServer(NetworkRunner runner, NetDisconnectReason reason)
    {
        throw new NotImplementedException();
    }

    public void OnReliableDataReceived(NetworkRunner runner, PlayerRef player, ReliableKey key, ArraySegment<byte> data)
    {
        throw new NotImplementedException();
    }

    public void OnReliableDataProgress(NetworkRunner runner, PlayerRef player, ReliableKey key, float progress)
    {
        throw new NotImplementedException();
    }
}

